#+HTML_HEAD: <style type="text/css"> img {width: 50%} img[alt=bitcoin] {width: 20%}</style>

# #+title: Rust
#+author: 

* Rust : a gentle introduction

** Sommaire

**** Introduction
**** Getting Started
**** Common programming concepts
**** Ownership
**** Live

* Introduction

** Features

- High-level ergonomics
- Low-level control

** High-level ergonomics
- pattern matching

**  Low-level control

- pointers

** Comparison

|              | "ancestors" (pick 2) | Rust (pick 4) |
|--------------+----------------------+---------------|
| safety       | ?                    | X             |
| productivity | ?                    | X             |
| speed        | X                    | X             |
| ergonomics   | ?                    | X             |

# ** Bitcoin crash

#+ATTR_HTML: :alt bitcoin
# [[file:9rqkaqypt3271.jpg][file:/media/PNYProElite/etudes/alyra/veille_rust/9rqkaqypt3271.jpg]]


* Getting Started

** 2. Hello world

#+begin_src rust
  fn main() {
      println!("Hello, world!");
  }
#+end_src

Fonction main

# * Programming Guessing a name

* Common programming concepts

** Variables and mutability
immutable by default.

#+begin_src rust
  fn main() {
      let mut spaces = "   ";
      spaces = spaces.len();
  }
#+end_src

#+begin_src rust
  fn main() {
      let spaces = "   ";
      let spaces = spaces.len();
  }
#+end_src

** Data types

#+begin_src rust
  let guess: u32 = "42".parse().expect("Not a number!");
#+end_src

** 

| Length  | Signed | Unsigned |
|---------+--------+----------|
| 8-bit   | i8     | u8       |
| 16-bit  | i16    | u16      |
| 32-bit  | i32    | u32      |
| 64-bit  | i64    | u64      |
| 128-bit | i128   | u128     |
| arch    | isize  | usize    |

** Destructuring on tuple

#+begin_src rust
  fn main() {
      let tup: (i32, f64, u8) = (500, 6.4, 1);
  
      let (x, y, z) = tup;
  
      println!("The value of y is: {}", y);
  }
#+end_src

** Arrays

Fixed length

#+begin_src rust
  let a: [i32; 5] = [1, 2, 3, 4, 5];
#+end_src

Accessing elements

#+begin_src rust
  fn main() {
      let a = [1, 2, 3, 4, 5];
  
      let first = a[0];
      let second = a[1];
  }
#+end_src

** Functions

optional return keyword

#+begin_src rust
  fn main() {
      let x = plus_one(5);
  
      println!("The value of x is: {}", x);
  }
  
  fn plus_one(x: i32) -> i32 {
      x + 1
  }  
#+end_src

** Comments

Only one syntax

#+begin_src rust
  // hello, world
#+end_src

** Control Flow

** If / Else

#+begin_src rust
  fn main() {
      let number = 6;
  
      if number % 4 == 0 {
	  println!("number is divisible by 4");
      } else if number % 3 == 0 {
	  println!("number is divisible by 3");
      } else if number % 2 == 0 {
	  println!("number is divisible by 2");
      } else {
	  println!("number is not divisible by 4, 3, or 2");
      }
  }
#+end_src

** "Ternary"

#+begin_src rust
  fn main() {
      let condition = true;
      let number = if condition { 5 } else { 6 };
  
      println!("The value of number is: {}", number);
  }
#+end_src

** Classic while

#+begin_src rust
  fn main() {
      let mut number = 3;
  
      while number != 0 {
	  println!("{}!", number);
  
	  number -= 1;
      }
  
      println!("LIFTOFF!!!");
  }
#+end_src

** For iter()

#+begin_src rust
  fn main() {
      let a = [10, 20, 30, 40, 50];
  
      for element in a.iter() {
	  println!("the value is: {}", element);
      }
  }
#+end_src

** For range

#+begin_src rust
  fn main() {
      for number in (1..4).rev() {
	  println!("{}!", number);
      }
      println!("LIFTOFF!!!");
  }  
#+end_src

** Infinite loop

#+begin_src rust
  fn main() {
      loop {
	  println!("again!");
      }
  }
#+end_src

** break returns value

#+begin_src rust
  fn main() {
      let mut counter = 0;
  
      let result = loop {
	  counter += 1;
	  if counter == 10 {
	      break counter * 2;
	  }
      };
  
      println!("The result is {}", result);
  }
#+end_src

* Ownership

** Ownership rules

- Each value in Rust has a variable that’s called its owner.
- There can only be one owner at a time.
- When the owner goes out of scope, the value will be dropped.

** Scope

#+begin_src rust
  fn main() {
      {                      // s is not valid here, it’s not yet declared
	  let s = "hello";   // s is valid from this point forward
  
	  // do stuff with s
      }                      // this scope is now over, and s is no longer valid
  }
#+end_src

** String type
#+begin_src rust  
  fn main() {
      let mut s = String::from("hello");
  
      s.push_str(", world!"); // push_str() appends a literal to a String
  
      println!("{}", s); // This will print `hello, world!`
  }
#+end_src

** Pointers

|     addr | variable name |    value |
|----------+---------------+----------|
| 0x60ff18 | a             |       12 |
| 0x60ff14 | b             |      7.4 |
|        … | …             |        … |
| 0x404004 | p             | 0x60ff14 |
|        … | …             |        … |

** Pointers

*p will return the value of the address 0x60ff14 (the value of b)

& gives the address of the variable
- &a => 0x60ff18
- &b => 0x60ff14
- &p => 0x404004

** C : Malloc / Free

En C

#+begin_src c
  int * entier;
  
  entier = malloc (sizeof(int));
  if( entier == NULL ) {
    fprintf(stderr,"Allocation impossible");
   }
   else {
     /* affectation d'une valeur et affichage */
     ,*entier = 3;
     printf("%d",*entier);
  
     /* libération */
     free(entier);
     entier = NULL;
   }
#+end_src

** Variables Data interaction 1

#+begin_src rust
  let x = 5;
  let y = x;
  println!("x = {}, y = {}", x, y);
#+end_src

- la valeur contenue dans y est 5.
- 5 est un entier (type simple) dont la taille est fixe et connue à la compilation.

** Variables Data interaction 2 : move

#+begin_src rust
  let s1 = String::from("hello");
  let s2 = s1;
#+end_src

** Variables Data interaction 2 : move

#+ATTR_HTML: :src images/string_memory_diagram.svg
[[file:images/string_memory_diagram.svg][file:/media/PNYProElite/etudes/alyra/veille_rust/images/string_memory_diagram.svg]]

** Variables Data interaction 2 : move

#+ATTR_HTML: :src images/string_copy_repr.svg
[[file:images/string_copy_repr.svg][file:/media/PNYProElite/etudes/alyra/veille_rust/images/string_copy_repr.svg]]

Double free error

** Variables Data interaction 2 : move

#+begin_src rust
  fn main() {
      let s1 = String::from("hello");
      let s2 = s1;
  
      println!("{}, world!", s1);
  }
#+end_src

** Variables Data interaction 2 : move

#+ATTR_HTML: :src images/string_move_invalidated_ref.svg
[[file:images/string_move_invalidated_ref.svg][file:/media/PNYProElite/etudes/alyra/veille_rust/images/string_move_invalidated_ref.svg]]

** Variables Data interaction 2 : clone

#+begin_src rust
  let s1 = String::from("hello");
  let s2 = s1.clone();
  
  println!("s1 = {}, s2 = {}", s1, s2);
#+end_src

** Variables Data interaction 2 : clone

#+ATTR_HTML: :src images/string_clone_repr.svg
[[file:images/string_clone_repr.svg][file:/media/PNYProElite/etudes/alyra/veille_rust/images/string_clone_repr.svg]]

** Functions : taking ownership

#+begin_src rust
  fn main() {
      let s = String::from("hello");  // s comes into scope
  
      takes_ownership(s);             // s's value moves into the function...
      // ... and so is no longer valid here
  
      let x = 5;                      // x comes into scope
  
      makes_copy(x);                  // x would move into the function,
      // but i32 is Copy, so it's okay to still
      // use x afterward
  
  } // Here, x goes out of scope, then s. But because s's value was moved, nothing
  // special happens.
  
  fn takes_ownership(some_string: String) { // some_string comes into scope
      println!("{}", some_string);
  } // Here, some_string goes out of scope and `drop` is called. The backing
  // memory is freed.
  
  fn makes_copy(some_integer: i32) { // some_integer comes into scope
      println!("{}", some_integer);
  } // Here, some_integer goes out of scope. Nothing special happens.
#+end_src

** Functions : giving ownership

#+begin_src rust
  fn main() {
      let s1 = gives_ownership();         // gives_ownership moves its return
      // value into s1
  
      let s2 = String::from("hello");     // s2 comes into scope
  
      let s3 = takes_and_gives_back(s2);  // s2 is moved into
      // takes_and_gives_back, which also
      // moves its return value into s3
  } // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was
  // moved, so nothing happens. s1 goes out of scope and is dropped.
  
  fn gives_ownership() -> String {             // gives_ownership will move its
      // return value into the function
      // that calls it
  
      let some_string = String::from("hello"); // some_string comes into scope
  
      some_string                              // some_string is returned and
      // moves out to the calling
      // function
  }
  
  // takes_and_gives_back will take a String and return one
  fn takes_and_gives_back(a_string: String) -> String { // a_string comes into
      // scope
  
      a_string  // a_string is returned and moves out to the calling function
  }
#+end_src

** Functions : tuple ownership

#+begin_src rust
  fn main() {
      let s1 = String::from("hello");
  
      let (s2, len) = calculate_length(s1);
  
      println!("The length of '{}' is {}.", s2, len);
  }
  
  fn calculate_length(s: String) -> (String, usize) {
      let length = s.len(); // len() returns the length of a String
  
      (s, length)
  }
#+end_src

** References / borrowing

#+begin_src rust
  fn main() {
      let s1 = String::from("hello");
  
      let len = calculate_length(&s1);
  
      println!("The length of '{}' is {}.", s1, len);
  }
  
  fn calculate_length(s: &String) -> usize {
      s.len()
  }
#+end_src

** Borrowing immutable by default

#+begin_src rust
  fn main() {
    let s = String::from("hello");

    change(&s);
}

fn change(some_string: &String) {
    some_string.push_str(", world");
}
#+end_src

Does not compile

** Mutable references

#+begin_src rust
  fn main() {
      let mut s = String::from("hello");
  
      change(&mut s);
  }
  
  fn change(some_string: &mut String) {
      some_string.push_str(", world");
  }
#+end_src

** Only one mutable reference

#+begin_src rust
  fn main() {
      let mut s = String::from("hello");
  
      let r1 = &mut s;
      let r2 = &mut s;
  
      println!("{}, {}", r1, r2);
  }
#+end_src

Catch data race at compile time

** Mixing mutable and immutable

#+begin_src rust
  fn main() {
      let mut s = String::from("hello");
  
      let r1 = &s; // no problem
      let r2 = &s; // no problem
      let r3 = &mut s; // BIG PROBLEM
  
      println!("{}, {}, and {}", r1, r2, r3);
  }
#+end_src

does not compile

** Rustc smart boy

#+begin_src rust
  fn main() {
      let mut s = String::from("hello");
  
      let r1 = &s; // no problem
      let r2 = &s; // no problem
      println!("{} and {}", r1, r2);
      // r1 and r2 are no longer used after this point
  
      let r3 = &mut s; // no problem
      println!("{}", r3);
  }
#+end_src

compiles

** Dangling references

#+begin_src rust
  fn main() {
      let reference_to_nothing = dangle();
  }
  
  fn dangle() -> &String {
      let s = String::from("hello");
  
      &s
  }
#+end_src

** The Rules of References

- At any given time, you can have either one mutable reference or any number of immutable references.
- References must always be valid.

** Slice type

* Live

** exa

** bat

#+begin_src shell
  bat README.org
#+end_src

** fd

#+begin_src shell
  fd README.org
#+end_src

** sd

find and replace
faster than sed

#+begin_src shell
  sd vim emacs sd.txt
#+end_src

** ripgrep

grep (global regular expression print) -> ack -> ag -> pt -> rg

#+begin_src shell
  rg else
#+end_src

** grex

#+begin_src shell
  grex "Hello world" "Hello Alyra"
#+end_src

** nushell

- https://www.nushell.sh/
- [[https://github.com/nushell/nushell][GitHub - nushell/nushell: A new type of shell]]

#+begin_src shell
  ls | where size > 10kb | get name
#+end_src

#+begin_src shell
  sys | get disks | select device total | to json
#+end_src

** Pijul

https://pijul.org/

DVCS  (distributed version control system) based on a sound theory of patches.

** Redox OS

[[https://www.redox-os.org/][Redox - Your Next(Gen) OS]]


* WebAssembly

** What the what

https://webassembly.org/

WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine.
Wasm is designed as a portable compilation target for programming languages,
enabling deployment on the web for client and server applications.

** Rust and WebAssembly

[[https://rustwasm.github.io/book/][Introduction - Rust and WebAssembly]]

